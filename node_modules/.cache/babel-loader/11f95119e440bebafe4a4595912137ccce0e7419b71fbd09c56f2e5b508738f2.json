{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{Box,TextField,IconButton,Paper,Typography,List,ListItem,Avatar,Chip,Alert}from'@mui/material';import{Send,Lock,Warning,ArrowBack}from'@mui/icons-material';import{useEncryption}from'../encryption/encryption-hook';import{useP2P}from'../p2p/p2p-hook';import{useParams,useNavigate}from'react-router-dom';/**\n * Secure Chat Component - The core of our platform\n * End-to-end encrypted messaging between therapist and patient\n * No group chats, no channels, no complexity\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export function SecureChat(){const{patientId}=useParams();const navigate=useNavigate();const[messages,setMessages]=useState([]);// Mock patient data - in real app would fetch from API\nconst patientName=patientId==='patient-1'?'Jane Doe':patientId==='patient-2'?'John Smith':patientId==='patient-3'?'Mary Johnson':'Patient';const[newMessage,setNewMessage]=useState('');const[isTyping,setIsTyping]=useState(false);const[phiWarning,setPhiWarning]=useState(false);const messagesEndRef=useRef(null);const{encrypt,decrypt}=useEncryption();const{sendMessage,onMessage,isConnected}=useP2P(patientId);useEffect(()=>{// Listen for incoming messages\nconst unsubscribe=onMessage(async encryptedMsg=>{const decrypted=await decrypt(encryptedMsg);setMessages(prev=>[...prev,{id:Date.now(),text:decrypted.text,sender:'patient',timestamp:new Date(),encrypted:true}]);});return unsubscribe;},[decrypt,onMessage]);useEffect(()=>{var _messagesEndRef$curre;// Auto-scroll to bottom\n(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});},[messages]);// Simple PHI detection (real implementation would be more sophisticated)\nconst detectPHI=text=>{const phiPatterns=[/\\b\\d{3}-\\d{2}-\\d{4}\\b/,// SSN\n/\\b\\d{3}-\\d{3}-\\d{4}\\b/,// Phone\n/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/,// Email\n/\\b(ssn|social security|dob|date of birth)\\b/i];return phiPatterns.some(pattern=>pattern.test(text));};const handleSend=async()=>{if(!newMessage.trim()||!isConnected)return;// Check for PHI\nif(detectPHI(newMessage)){setPhiWarning(true);setTimeout(()=>setPhiWarning(false),5000);}// Encrypt and send\nconst encrypted=await encrypt({text:newMessage,timestamp:Date.now(),type:'message'});await sendMessage(encrypted);// Add to local messages\nsetMessages(prev=>[...prev,{id:Date.now(),text:newMessage,sender:'therapist',timestamp:new Date(),encrypted:true}]);setNewMessage('');};const handleBack=()=>{navigate(-1);};return/*#__PURE__*/_jsxs(Paper,{sx:{height:'600px',display:'flex',flexDirection:'column'},children:[/*#__PURE__*/_jsxs(Box,{sx:{p:2,borderBottom:1,borderColor:'divider',display:'flex',alignItems:'center',justifyContent:'space-between'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',gap:2},children:[/*#__PURE__*/_jsx(IconButton,{onClick:handleBack,children:/*#__PURE__*/_jsx(ArrowBack,{})}),/*#__PURE__*/_jsx(Avatar,{children:patientName[0]}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:patientName})]}),/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',alignItems:'center',gap:1},children:[/*#__PURE__*/_jsx(Lock,{fontSize:\"small\",color:\"success\"}),/*#__PURE__*/_jsx(Typography,{variant:\"caption\",color:\"success.main\",children:\"End-to-End Encrypted\"})]})]}),phiWarning&&/*#__PURE__*/_jsxs(Alert,{severity:\"warning\",sx:{m:2},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"PHI Detected:\"}),\" This message may contain sensitive information. It will be encrypted and logged per HIPAA requirements.\"]}),/*#__PURE__*/_jsxs(List,{sx:{flex:1,overflow:'auto',p:2},children:[messages.map(msg=>/*#__PURE__*/_jsx(ListItem,{sx:{flexDirection:msg.sender==='therapist'?'row-reverse':'row',gap:1,mb:2},children:/*#__PURE__*/_jsxs(Paper,{sx:{p:2,maxWidth:'70%',bgcolor:msg.sender==='therapist'?'primary.light':'grey.100'},children:[/*#__PURE__*/_jsx(Typography,{children:msg.text}),/*#__PURE__*/_jsx(Typography,{variant:\"caption\",color:\"text.secondary\",children:msg.timestamp.toLocaleTimeString()})]})},msg.id)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(Box,{sx:{p:2,borderTop:1,borderColor:'divider'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',gap:1},children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,placeholder:\"Type a secure message...\",value:newMessage,onChange:e=>setNewMessage(e.target.value),onKeyPress:e=>e.key==='Enter'&&!e.shiftKey&&handleSend(),multiline:true,maxRows:3,disabled:!isConnected}),/*#__PURE__*/_jsx(IconButton,{color:\"primary\",onClick:handleSend,disabled:!isConnected||!newMessage.trim(),children:/*#__PURE__*/_jsx(Send,{})})]}),!isConnected&&/*#__PURE__*/_jsx(Typography,{variant:\"caption\",color:\"error\",sx:{mt:1},children:\"Connection lost. Messages will be sent when connection is restored.\"})]})]});}// What this component does NOT do:\n// - Group messaging (too complex for MVP)\n// - File attachments (security complexity)\n// - Voice notes (HIPAA complexity)\n// - Reactions/emojis (not professional)\n// - Read receipts (privacy concerns)\n// - Message editing (audit trail issues)\n// Just simple, secure, therapist-patient messaging.","map":{"version":3,"names":["React","useState","useEffect","useRef","Box","TextField","IconButton","Paper","Typography","List","ListItem","Avatar","Chip","Alert","Send","Lock","Warning","ArrowBack","useEncryption","useP2P","useParams","useNavigate","jsx","_jsx","jsxs","_jsxs","SecureChat","patientId","navigate","messages","setMessages","patientName","newMessage","setNewMessage","isTyping","setIsTyping","phiWarning","setPhiWarning","messagesEndRef","encrypt","decrypt","sendMessage","onMessage","isConnected","unsubscribe","encryptedMsg","decrypted","prev","id","Date","now","text","sender","timestamp","encrypted","_messagesEndRef$curre","current","scrollIntoView","behavior","detectPHI","phiPatterns","some","pattern","test","handleSend","trim","setTimeout","type","handleBack","sx","height","display","flexDirection","children","p","borderBottom","borderColor","alignItems","justifyContent","gap","onClick","variant","fontSize","color","severity","m","flex","overflow","map","msg","mb","maxWidth","bgcolor","toLocaleTimeString","ref","borderTop","fullWidth","placeholder","value","onChange","e","target","onKeyPress","key","shiftKey","multiline","maxRows","disabled","mt"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/messaging/secure-chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { \n  Box, \n  TextField, \n  IconButton, \n  Paper, \n  Typography, \n  List, \n  ListItem,\n  Avatar,\n  Chip,\n  Alert\n} from '@mui/material';\nimport { Send, Lock, Warning, ArrowBack } from '@mui/icons-material';\nimport { useEncryption } from '../encryption/encryption-hook';\nimport { useP2P } from '../p2p/p2p-hook';\nimport { useParams, useNavigate } from 'react-router-dom';\n\n/**\n * Secure Chat Component - The core of our platform\n * End-to-end encrypted messaging between therapist and patient\n * No group chats, no channels, no complexity\n */\nexport function SecureChat() {\n  const { patientId } = useParams();\n  const navigate = useNavigate();\n  const [messages, setMessages] = useState([]);\n  \n  // Mock patient data - in real app would fetch from API\n  const patientName = patientId === 'patient-1' ? 'Jane Doe' : \n                     patientId === 'patient-2' ? 'John Smith' : \n                     patientId === 'patient-3' ? 'Mary Johnson' : 'Patient';\n  const [newMessage, setNewMessage] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n  const [phiWarning, setPhiWarning] = useState(false);\n  const messagesEndRef = useRef(null);\n  \n  const { encrypt, decrypt } = useEncryption();\n  const { sendMessage, onMessage, isConnected } = useP2P(patientId);\n\n  useEffect(() => {\n    // Listen for incoming messages\n    const unsubscribe = onMessage(async (encryptedMsg) => {\n      const decrypted = await decrypt(encryptedMsg);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: decrypted.text,\n        sender: 'patient',\n        timestamp: new Date(),\n        encrypted: true\n      }]);\n    });\n\n    return unsubscribe;\n  }, [decrypt, onMessage]);\n\n  useEffect(() => {\n    // Auto-scroll to bottom\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [messages]);\n\n  // Simple PHI detection (real implementation would be more sophisticated)\n  const detectPHI = (text) => {\n    const phiPatterns = [\n      /\\b\\d{3}-\\d{2}-\\d{4}\\b/, // SSN\n      /\\b\\d{3}-\\d{3}-\\d{4}\\b/, // Phone\n      /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, // Email\n      /\\b(ssn|social security|dob|date of birth)\\b/i,\n    ];\n    \n    return phiPatterns.some(pattern => pattern.test(text));\n  };\n\n  const handleSend = async () => {\n    if (!newMessage.trim() || !isConnected) return;\n\n    // Check for PHI\n    if (detectPHI(newMessage)) {\n      setPhiWarning(true);\n      setTimeout(() => setPhiWarning(false), 5000);\n    }\n\n    // Encrypt and send\n    const encrypted = await encrypt({\n      text: newMessage,\n      timestamp: Date.now(),\n      type: 'message'\n    });\n\n    await sendMessage(encrypted);\n\n    // Add to local messages\n    setMessages(prev => [...prev, {\n      id: Date.now(),\n      text: newMessage,\n      sender: 'therapist',\n      timestamp: new Date(),\n      encrypted: true\n    }]);\n\n    setNewMessage('');\n  };\n\n  const handleBack = () => {\n    navigate(-1);\n  };\n\n  return (\n    <Paper sx={{ height: '600px', display: 'flex', flexDirection: 'column' }}>\n      {/* Header */}\n      <Box sx={{ \n        p: 2, \n        borderBottom: 1, \n        borderColor: 'divider',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\n          <IconButton onClick={handleBack}>\n            <ArrowBack />\n          </IconButton>\n          <Avatar>{patientName[0]}</Avatar>\n          <Typography variant=\"h6\">{patientName}</Typography>\n        </Box>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n          <Lock fontSize=\"small\" color=\"success\" />\n          <Typography variant=\"caption\" color=\"success.main\">\n            End-to-End Encrypted\n          </Typography>\n        </Box>\n      </Box>\n\n      {/* PHI Warning */}\n      {phiWarning && (\n        <Alert severity=\"warning\" sx={{ m: 2 }}>\n          <strong>PHI Detected:</strong> This message may contain sensitive information. \n          It will be encrypted and logged per HIPAA requirements.\n        </Alert>\n      )}\n\n      {/* Messages */}\n      <List sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n        {messages.map((msg) => (\n          <ListItem\n            key={msg.id}\n            sx={{\n              flexDirection: msg.sender === 'therapist' ? 'row-reverse' : 'row',\n              gap: 1,\n              mb: 2\n            }}\n          >\n            <Paper\n              sx={{\n                p: 2,\n                maxWidth: '70%',\n                bgcolor: msg.sender === 'therapist' ? 'primary.light' : 'grey.100'\n              }}\n            >\n              <Typography>{msg.text}</Typography>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {msg.timestamp.toLocaleTimeString()}\n              </Typography>\n            </Paper>\n          </ListItem>\n        ))}\n        <div ref={messagesEndRef} />\n      </List>\n\n      {/* Input */}\n      <Box sx={{ p: 2, borderTop: 1, borderColor: 'divider' }}>\n        <Box sx={{ display: 'flex', gap: 1 }}>\n          <TextField\n            fullWidth\n            placeholder=\"Type a secure message...\"\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSend()}\n            multiline\n            maxRows={3}\n            disabled={!isConnected}\n          />\n          <IconButton \n            color=\"primary\" \n            onClick={handleSend}\n            disabled={!isConnected || !newMessage.trim()}\n          >\n            <Send />\n          </IconButton>\n        </Box>\n        \n        {!isConnected && (\n          <Typography variant=\"caption\" color=\"error\" sx={{ mt: 1 }}>\n            Connection lost. Messages will be sent when connection is restored.\n          </Typography>\n        )}\n      </Box>\n    </Paper>\n  );\n}\n\n// What this component does NOT do:\n// - Group messaging (too complex for MVP)\n// - File attachments (security complexity)\n// - Voice notes (HIPAA complexity)\n// - Reactions/emojis (not professional)\n// - Read receipts (privacy concerns)\n// - Message editing (audit trail issues)\n// Just simple, secure, therapist-patient messaging."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}