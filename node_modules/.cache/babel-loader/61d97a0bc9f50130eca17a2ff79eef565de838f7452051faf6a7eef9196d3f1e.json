{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\OneDrive\\\\Desktop\\\\shadow-sidekick-sqlite-vss-poc\\\\haven-mental-health\\\\src\\\\encryption\\\\encryption-provider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { EncryptionService } from './encryption-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EncryptionContext = /*#__PURE__*/createContext();\n\n/**\n * Encryption Provider\n * Manages encryption keys and provides encryption/decryption services\n * Uses AES-256-GCM for symmetric encryption\n */\nexport function EncryptionProvider({\n  children\n}) {\n  _s();\n  const [encryptionService, setEncryptionService] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    initializeEncryption();\n  }, []);\n  const initializeEncryption = async () => {\n    try {\n      const service = new EncryptionService();\n      await service.initialize();\n      setEncryptionService(service);\n      setIsReady(true);\n    } catch (error) {\n      console.error('Failed to initialize encryption:', error);\n    }\n  };\n  const encrypt = async data => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.encrypt(data);\n  };\n  const decrypt = async encryptedData => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.decrypt(encryptedData);\n  };\n  const value = {\n    encrypt,\n    decrypt,\n    isReady\n  };\n  return /*#__PURE__*/_jsxDEV(EncryptionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(EncryptionProvider, \"Qf1E7EYRrQC51XgaYN9RDXreIbY=\");\n_c = EncryptionProvider;\nexport function useEncryption() {\n  _s2();\n  const context = useContext(EncryptionContext);\n  if (!context) {\n    throw new Error('useEncryption must be used within EncryptionProvider');\n  }\n  return context;\n}\n_s2(useEncryption, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"EncryptionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","EncryptionService","jsxDEV","_jsxDEV","EncryptionContext","EncryptionProvider","children","_s","encryptionService","setEncryptionService","isReady","setIsReady","initializeEncryption","service","initialize","error","console","encrypt","data","Error","decrypt","encryptedData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEncryption","_s2","context","$RefreshReg$"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/encryption/encryption-provider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { EncryptionService } from './encryption-service';\n\nconst EncryptionContext = createContext();\n\n/**\n * Encryption Provider\n * Manages encryption keys and provides encryption/decryption services\n * Uses AES-256-GCM for symmetric encryption\n */\nexport function EncryptionProvider({ children }) {\n  const [encryptionService, setEncryptionService] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    initializeEncryption();\n  }, []);\n\n  const initializeEncryption = async () => {\n    try {\n      const service = new EncryptionService();\n      await service.initialize();\n      setEncryptionService(service);\n      setIsReady(true);\n    } catch (error) {\n      console.error('Failed to initialize encryption:', error);\n    }\n  };\n\n  const encrypt = async (data) => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.encrypt(data);\n  };\n\n  const decrypt = async (encryptedData) => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.decrypt(encryptedData);\n  };\n\n  const value = {\n    encrypt,\n    decrypt,\n    isReady\n  };\n\n  return (\n    <EncryptionContext.Provider value={value}>\n      {children}\n    </EncryptionContext.Provider>\n  );\n}\n\nexport function useEncryption() {\n  const context = useContext(EncryptionContext);\n  if (!context) {\n    throw new Error('useEncryption must be used within EncryptionProvider');\n  }\n  return context;\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,iBAAiB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,iBAAiB,gBAAGP,aAAa,CAAC,CAAC;;AAEzC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,kBAAkBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC/C,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACdY,oBAAoB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF,MAAMC,OAAO,GAAG,IAAIZ,iBAAiB,CAAC,CAAC;MACvC,MAAMY,OAAO,CAACC,UAAU,CAAC,CAAC;MAC1BL,oBAAoB,CAACI,OAAO,CAAC;MAC7BF,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,MAAME,OAAO,GAAG,MAAOC,IAAI,IAAK;IAC9B,IAAI,CAACV,iBAAiB,EAAE;MACtB,MAAM,IAAIW,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,OAAOX,iBAAiB,CAACS,OAAO,CAACC,IAAI,CAAC;EACxC,CAAC;EAED,MAAME,OAAO,GAAG,MAAOC,aAAa,IAAK;IACvC,IAAI,CAACb,iBAAiB,EAAE;MACtB,MAAM,IAAIW,KAAK,CAAC,oCAAoC,CAAC;IACvD;IACA,OAAOX,iBAAiB,CAACY,OAAO,CAACC,aAAa,CAAC;EACjD,CAAC;EAED,MAAMC,KAAK,GAAG;IACZL,OAAO;IACPG,OAAO;IACPV;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,iBAAiB,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EACtCA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC;AAACpB,EAAA,CA5CeF,kBAAkB;AAAAuB,EAAA,GAAlBvB,kBAAkB;AA8ClC,OAAO,SAASwB,aAAaA,CAAA,EAAG;EAAAC,GAAA;EAC9B,MAAMC,OAAO,GAAGjC,UAAU,CAACM,iBAAiB,CAAC;EAC7C,IAAI,CAAC2B,OAAO,EAAE;IACZ,MAAM,IAAIZ,KAAK,CAAC,sDAAsD,CAAC;EACzE;EACA,OAAOY,OAAO;AAChB;AAACD,GAAA,CANeD,aAAa;AAAA,IAAAD,EAAA;AAAAI,YAAA,CAAAJ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}