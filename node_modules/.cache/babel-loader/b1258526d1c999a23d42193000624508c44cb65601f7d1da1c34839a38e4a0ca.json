{"ast":null,"code":"import _objectSpread from\"C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const MessageContext=/*#__PURE__*/createContext();/**\n * Message Context\n * Manages unread messages and notifications\n * Simple state management for messaging features\n */export function MessageProvider(_ref){let{children}=_ref;const[messages,setMessages]=useState([]);const[unreadCount,setUnreadCount]=useState(0);useEffect(()=>{// Load messages from storage\nloadMessages();},[]);const loadMessages=()=>{// In real app, this would load from secure backend\nconst storedMessages=[{id:1,patientId:'patient-1',patientName:'Jane Doe',preview:'I wanted to discuss our last session...',timestamp:new Date(Date.now()-3600000),read:false},{id:2,patientId:'patient-2',patientName:'John Smith',preview:'Thank you for the resources you shared',timestamp:new Date(Date.now()-7200000),read:false}];setMessages(storedMessages);setUnreadCount(storedMessages.filter(m=>!m.read).length);};const markAsRead=messageId=>{setMessages(messages.map(m=>m.id===messageId?_objectSpread(_objectSpread({},m),{},{read:true}):m));setUnreadCount(prev=>Math.max(0,prev-1));};const recentMessages=messages.filter(m=>!m.read).sort((a,b)=>b.timestamp-a.timestamp);const value={messages,unreadCount,recentMessages,markAsRead};return/*#__PURE__*/_jsx(MessageContext.Provider,{value:value,children:children});}export function useMessages(){const context=useContext(MessageContext);if(!context){throw new Error('useMessages must be used within MessageProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","MessageContext","MessageProvider","_ref","children","messages","setMessages","unreadCount","setUnreadCount","loadMessages","storedMessages","id","patientId","patientName","preview","timestamp","Date","now","read","filter","m","length","markAsRead","messageId","map","_objectSpread","prev","Math","max","recentMessages","sort","a","b","value","Provider","useMessages","context","Error"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/messaging/message-context.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst MessageContext = createContext();\n\n/**\n * Message Context\n * Manages unread messages and notifications\n * Simple state management for messaging features\n */\nexport function MessageProvider({ children }) {\n  const [messages, setMessages] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  \n  useEffect(() => {\n    // Load messages from storage\n    loadMessages();\n  }, []);\n\n  const loadMessages = () => {\n    // In real app, this would load from secure backend\n    const storedMessages = [\n      {\n        id: 1,\n        patientId: 'patient-1',\n        patientName: 'Jane Doe',\n        preview: 'I wanted to discuss our last session...',\n        timestamp: new Date(Date.now() - 3600000),\n        read: false\n      },\n      {\n        id: 2,\n        patientId: 'patient-2',\n        patientName: 'John Smith',\n        preview: 'Thank you for the resources you shared',\n        timestamp: new Date(Date.now() - 7200000),\n        read: false\n      }\n    ];\n    \n    setMessages(storedMessages);\n    setUnreadCount(storedMessages.filter(m => !m.read).length);\n  };\n\n  const markAsRead = (messageId) => {\n    setMessages(messages.map(m => \n      m.id === messageId ? { ...m, read: true } : m\n    ));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n\n  const recentMessages = messages\n    .filter(m => !m.read)\n    .sort((a, b) => b.timestamp - a.timestamp);\n\n  const value = {\n    messages,\n    unreadCount,\n    recentMessages,\n    markAsRead\n  };\n\n  return (\n    <MessageContext.Provider value={value}>\n      {children}\n    </MessageContext.Provider>\n  );\n}\n\nexport function useMessages() {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessages must be used within MessageProvider');\n  }\n  return context;\n}"],"mappings":"uKAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,cAAc,cAAGN,aAAa,CAAC,CAAC,CAEtC;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAO,eAAeA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC1C,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACU,WAAW,CAAEC,cAAc,CAAC,CAAGX,QAAQ,CAAC,CAAC,CAAC,CAEjDC,SAAS,CAAC,IAAM,CACd;AACAW,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,YAAY,CAAGA,CAAA,GAAM,CACzB;AACA,KAAM,CAAAC,cAAc,CAAG,CACrB,CACEC,EAAE,CAAE,CAAC,CACLC,SAAS,CAAE,WAAW,CACtBC,WAAW,CAAE,UAAU,CACvBC,OAAO,CAAE,yCAAyC,CAClDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,OAAO,CAAC,CACzCC,IAAI,CAAE,KACR,CAAC,CACD,CACEP,EAAE,CAAE,CAAC,CACLC,SAAS,CAAE,WAAW,CACtBC,WAAW,CAAE,YAAY,CACzBC,OAAO,CAAE,wCAAwC,CACjDC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,OAAO,CAAC,CACzCC,IAAI,CAAE,KACR,CAAC,CACF,CAEDZ,WAAW,CAACI,cAAc,CAAC,CAC3BF,cAAc,CAACE,cAAc,CAACS,MAAM,CAACC,CAAC,EAAI,CAACA,CAAC,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC,CAC5D,CAAC,CAED,KAAM,CAAAC,UAAU,CAAIC,SAAS,EAAK,CAChCjB,WAAW,CAACD,QAAQ,CAACmB,GAAG,CAACJ,CAAC,EACxBA,CAAC,CAACT,EAAE,GAAKY,SAAS,CAAAE,aAAA,CAAAA,aAAA,IAAQL,CAAC,MAAEF,IAAI,CAAE,IAAI,GAAKE,CAC9C,CAAC,CAAC,CACFZ,cAAc,CAACkB,IAAI,EAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEF,IAAI,CAAG,CAAC,CAAC,CAAC,CAC/C,CAAC,CAED,KAAM,CAAAG,cAAc,CAAGxB,QAAQ,CAC5Bc,MAAM,CAACC,CAAC,EAAI,CAACA,CAAC,CAACF,IAAI,CAAC,CACpBY,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACjB,SAAS,CAAGgB,CAAC,CAAChB,SAAS,CAAC,CAE5C,KAAM,CAAAkB,KAAK,CAAG,CACZ5B,QAAQ,CACRE,WAAW,CACXsB,cAAc,CACdP,UACF,CAAC,CAED,mBACEtB,IAAA,CAACC,cAAc,CAACiC,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAA7B,QAAA,CACnCA,QAAQ,CACc,CAAC,CAE9B,CAEA,MAAO,SAAS,CAAA+B,WAAWA,CAAA,CAAG,CAC5B,KAAM,CAAAC,OAAO,CAAGxC,UAAU,CAACK,cAAc,CAAC,CAC1C,GAAI,CAACmC,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,iDAAiD,CAAC,CACpE,CACA,MAAO,CAAAD,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}