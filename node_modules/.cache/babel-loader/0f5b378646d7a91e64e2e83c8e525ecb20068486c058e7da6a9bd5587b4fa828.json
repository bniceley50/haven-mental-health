{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\OneDrive\\\\Desktop\\\\shadow-sidekick-sqlite-vss-poc\\\\haven-mental-health\\\\src\\\\auth\\\\auth-context.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { SimpleAuth } from './simple-auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authService = new SimpleAuth();\n\n/**\n * Auth Context Provider\n * Manages authentication state for the entire app\n * Simple session-based auth, no complex token management\n */\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for existing session\n    checkSession();\n\n    // Set up periodic session cleanup\n    const cleanupInterval = setInterval(() => {\n      authService.cleanupSessions();\n    }, 60000); // Every minute\n\n    // Reset login attempts every 15 minutes\n    const resetInterval = setInterval(() => {\n      authService.resetLoginAttempts();\n    }, 15 * 60000);\n    return () => {\n      clearInterval(cleanupInterval);\n      clearInterval(resetInterval);\n    };\n  }, []);\n  const checkSession = () => {\n    const sessionId = localStorage.getItem('haven-session');\n    if (sessionId) {\n      const session = authService.validateSession(sessionId);\n      if (session) {\n        setUser(session);\n        setIsAuthenticated(true);\n      } else {\n        localStorage.removeItem('haven-session');\n      }\n    }\n    setLoading(false);\n  };\n  const login = async (email, password) => {\n    try {\n      const result = await authService.login(email, password);\n\n      // Store session\n      localStorage.setItem('haven-session', result.sessionId);\n\n      // Update state\n      setUser(result.user);\n      setIsAuthenticated(true);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const result = await authService.register(email, password, name);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n  const logout = () => {\n    const sessionId = localStorage.getItem('haven-session');\n    if (sessionId) {\n      authService.logout(sessionId);\n    }\n    localStorage.removeItem('haven-session');\n    setUser(null);\n    setIsAuthenticated(false);\n\n    // Redirect to login\n    window.location.href = '/login';\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","SimpleAuth","jsxDEV","_jsxDEV","AuthContext","authService","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkSession","cleanupInterval","setInterval","cleanupSessions","resetInterval","resetLoginAttempts","clearInterval","sessionId","localStorage","getItem","session","validateSession","removeItem","login","email","password","result","setItem","error","register","name","logout","window","location","href","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/auth/auth-context.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { SimpleAuth } from './simple-auth';\n\nconst AuthContext = createContext();\nconst authService = new SimpleAuth();\n\n/**\n * Auth Context Provider\n * Manages authentication state for the entire app\n * Simple session-based auth, no complex token management\n */\nexport function AuthProvider({ children }) {\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    checkSession();\n    \n    // Set up periodic session cleanup\n    const cleanupInterval = setInterval(() => {\n      authService.cleanupSessions();\n    }, 60000); // Every minute\n\n    // Reset login attempts every 15 minutes\n    const resetInterval = setInterval(() => {\n      authService.resetLoginAttempts();\n    }, 15 * 60000);\n\n    return () => {\n      clearInterval(cleanupInterval);\n      clearInterval(resetInterval);\n    };\n  }, []);\n\n  const checkSession = () => {\n    const sessionId = localStorage.getItem('haven-session');\n    if (sessionId) {\n      const session = authService.validateSession(sessionId);\n      if (session) {\n        setUser(session);\n        setIsAuthenticated(true);\n      } else {\n        localStorage.removeItem('haven-session');\n      }\n    }\n    setLoading(false);\n  };\n\n  const login = async (email, password) => {\n    try {\n      const result = await authService.login(email, password);\n      \n      // Store session\n      localStorage.setItem('haven-session', result.sessionId);\n      \n      // Update state\n      setUser(result.user);\n      setIsAuthenticated(true);\n      \n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const register = async (email, password, name) => {\n    try {\n      const result = await authService.register(email, password, name);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    const sessionId = localStorage.getItem('haven-session');\n    if (sessionId) {\n      authService.logout(sessionId);\n    }\n    \n    localStorage.removeItem('haven-session');\n    setUser(null);\n    setIsAuthenticated(false);\n    \n    // Redirect to login\n    window.location.href = '/login';\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}