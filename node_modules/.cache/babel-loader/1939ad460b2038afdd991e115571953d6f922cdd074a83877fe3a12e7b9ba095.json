{"ast":null,"code":"import{useNavigate}from'react-router-dom';import{useCallback}from'react';/**\n * Custom navigation hook with error handling and loading states\n * Provides a clean interface for navigation throughout the app\n */export function useNavigation(){const navigate=useNavigate();// Navigate to session note creation with patient context\nconst navigateToSessionNote=useCallback(function(){let patientData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{if(patientData){// Pass patient data through navigation state\nnavigate('/note/new',{state:{patientId:patientData.id,patientName:patientData.patient||patientData.name,appointmentTime:patientData.time,appointmentType:patientData.type||'session'}});}else{// New note without patient context\nnavigate('/note/new');}}catch(error){console.error('Navigation error:',error);// In production, this would report to error tracking\n}},[navigate]);// Navigate to secure messaging\nconst navigateToMessage=useCallback(function(){let patientId=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;try{if(patientId){navigate(\"/chat/\".concat(patientId));}else{// Go to message list if no specific patient\nnavigate('/messages');}}catch(error){console.error('Navigation error:',error);}},[navigate]);// Navigate to video session\nconst navigateToVideo=useCallback(sessionData=>{try{if(!sessionData){console.error('Session data required for video call');return;}// Generate session ID from appointment data\nconst sessionId=\"session-\".concat(sessionData.id,\"-\").concat(Date.now());navigate(\"/video/\".concat(sessionId),{state:{patientName:sessionData.patient,appointmentTime:sessionData.time}});}catch(error){console.error('Navigation error:',error);}},[navigate]);// Navigate to schedule\nconst navigateToSchedule=useCallback(()=>{try{navigate('/schedule');}catch(error){console.error('Navigation error:',error);}},[navigate]);// Navigate to all messages\nconst navigateToAllMessages=useCallback(()=>{try{navigate('/messages');}catch(error){console.error('Navigation error:',error);}},[navigate]);return{navigateToSessionNote,navigateToMessage,navigateToVideo,navigateToSchedule,navigateToAllMessages};}","map":{"version":3,"names":["useNavigate","useCallback","useNavigation","navigate","navigateToSessionNote","patientData","arguments","length","undefined","state","patientId","id","patientName","patient","name","appointmentTime","time","appointmentType","type","error","console","navigateToMessage","concat","navigateToVideo","sessionData","sessionId","Date","now","navigateToSchedule","navigateToAllMessages"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/hooks/useNavigation.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useCallback } from 'react';\n\n/**\n * Custom navigation hook with error handling and loading states\n * Provides a clean interface for navigation throughout the app\n */\nexport function useNavigation() {\n  const navigate = useNavigate();\n\n  // Navigate to session note creation with patient context\n  const navigateToSessionNote = useCallback((patientData = null) => {\n    try {\n      if (patientData) {\n        // Pass patient data through navigation state\n        navigate('/note/new', { \n          state: { \n            patientId: patientData.id,\n            patientName: patientData.patient || patientData.name,\n            appointmentTime: patientData.time,\n            appointmentType: patientData.type || 'session'\n          } \n        });\n      } else {\n        // New note without patient context\n        navigate('/note/new');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n      // In production, this would report to error tracking\n    }\n  }, [navigate]);\n\n  // Navigate to secure messaging\n  const navigateToMessage = useCallback((patientId = null) => {\n    try {\n      if (patientId) {\n        navigate(`/chat/${patientId}`);\n      } else {\n        // Go to message list if no specific patient\n        navigate('/messages');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to video session\n  const navigateToVideo = useCallback((sessionData) => {\n    try {\n      if (!sessionData) {\n        console.error('Session data required for video call');\n        return;\n      }\n      \n      // Generate session ID from appointment data\n      const sessionId = `session-${sessionData.id}-${Date.now()}`;\n      \n      navigate(`/video/${sessionId}`, {\n        state: {\n          patientName: sessionData.patient,\n          appointmentTime: sessionData.time\n        }\n      });\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to schedule\n  const navigateToSchedule = useCallback(() => {\n    try {\n      navigate('/schedule');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to all messages\n  const navigateToAllMessages = useCallback(() => {\n    try {\n      navigate('/messages');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  return {\n    navigateToSessionNote,\n    navigateToMessage,\n    navigateToVideo,\n    navigateToSchedule,\n    navigateToAllMessages\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}