{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{EncryptionService}from'./encryption-service';import{jsx as _jsx}from\"react/jsx-runtime\";export const EncryptionContext=/*#__PURE__*/createContext();/**\n * Encryption Provider\n * Manages encryption keys and provides encryption/decryption services\n * Uses AES-256-GCM for symmetric encryption\n */export function EncryptionProvider(_ref){let{children}=_ref;const[encryptionService,setEncryptionService]=useState(null);const[isReady,setIsReady]=useState(false);useEffect(()=>{initializeEncryption();},[]);const initializeEncryption=async()=>{try{const service=new EncryptionService();await service.initialize();setEncryptionService(service);setIsReady(true);}catch(error){console.error('Failed to initialize encryption:',error);}};const encrypt=async data=>{if(!encryptionService){throw new Error('Encryption service not initialized');}return encryptionService.encrypt(data);};const decrypt=async encryptedData=>{if(!encryptionService){throw new Error('Encryption service not initialized');}return encryptionService.decrypt(encryptedData);};const value={encrypt,decrypt,isReady};return/*#__PURE__*/_jsx(EncryptionContext.Provider,{value:value,children:children});}export function useEncryption(){const context=useContext(EncryptionContext);if(!context){throw new Error('useEncryption must be used within EncryptionProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","EncryptionService","jsx","_jsx","EncryptionContext","EncryptionProvider","_ref","children","encryptionService","setEncryptionService","isReady","setIsReady","initializeEncryption","service","initialize","error","console","encrypt","data","Error","decrypt","encryptedData","value","Provider","useEncryption","context"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/encryption/encryption-provider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { EncryptionService } from './encryption-service';\n\nexport const EncryptionContext = createContext();\n\n/**\n * Encryption Provider\n * Manages encryption keys and provides encryption/decryption services\n * Uses AES-256-GCM for symmetric encryption\n */\nexport function EncryptionProvider({ children }) {\n  const [encryptionService, setEncryptionService] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    initializeEncryption();\n  }, []);\n\n  const initializeEncryption = async () => {\n    try {\n      const service = new EncryptionService();\n      await service.initialize();\n      setEncryptionService(service);\n      setIsReady(true);\n    } catch (error) {\n      console.error('Failed to initialize encryption:', error);\n    }\n  };\n\n  const encrypt = async (data) => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.encrypt(data);\n  };\n\n  const decrypt = async (encryptedData) => {\n    if (!encryptionService) {\n      throw new Error('Encryption service not initialized');\n    }\n    return encryptionService.decrypt(encryptedData);\n  };\n\n  const value = {\n    encrypt,\n    decrypt,\n    isReady\n  };\n\n  return (\n    <EncryptionContext.Provider value={value}>\n      {children}\n    </EncryptionContext.Provider>\n  );\n}\n\nexport function useEncryption() {\n  const context = useContext(EncryptionContext);\n  if (!context) {\n    throw new Error('useEncryption must be used within EncryptionProvider');\n  }\n  return context;\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC7E,OAASC,iBAAiB,KAAQ,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEzD,MAAO,MAAM,CAAAC,iBAAiB,cAAGP,aAAa,CAAC,CAAC,CAEhD;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAQ,kBAAkBA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC7C,KAAM,CAACE,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAChE,KAAM,CAACW,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CAE7CC,SAAS,CAAC,IAAM,CACdY,oBAAoB,CAAC,CAAC,CACxB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAA,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACvC,GAAI,CACF,KAAM,CAAAC,OAAO,CAAG,GAAI,CAAAZ,iBAAiB,CAAC,CAAC,CACvC,KAAM,CAAAY,OAAO,CAACC,UAAU,CAAC,CAAC,CAC1BL,oBAAoB,CAACI,OAAO,CAAC,CAC7BF,UAAU,CAAC,IAAI,CAAC,CAClB,CAAE,MAAOI,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAAC,CAC1D,CACF,CAAC,CAED,KAAM,CAAAE,OAAO,CAAG,KAAO,CAAAC,IAAI,EAAK,CAC9B,GAAI,CAACV,iBAAiB,CAAE,CACtB,KAAM,IAAI,CAAAW,KAAK,CAAC,oCAAoC,CAAC,CACvD,CACA,MAAO,CAAAX,iBAAiB,CAACS,OAAO,CAACC,IAAI,CAAC,CACxC,CAAC,CAED,KAAM,CAAAE,OAAO,CAAG,KAAO,CAAAC,aAAa,EAAK,CACvC,GAAI,CAACb,iBAAiB,CAAE,CACtB,KAAM,IAAI,CAAAW,KAAK,CAAC,oCAAoC,CAAC,CACvD,CACA,MAAO,CAAAX,iBAAiB,CAACY,OAAO,CAACC,aAAa,CAAC,CACjD,CAAC,CAED,KAAM,CAAAC,KAAK,CAAG,CACZL,OAAO,CACPG,OAAO,CACPV,OACF,CAAC,CAED,mBACEP,IAAA,CAACC,iBAAiB,CAACmB,QAAQ,EAACD,KAAK,CAAEA,KAAM,CAAAf,QAAA,CACtCA,QAAQ,CACiB,CAAC,CAEjC,CAEA,MAAO,SAAS,CAAAiB,aAAaA,CAAA,CAAG,CAC9B,KAAM,CAAAC,OAAO,CAAG3B,UAAU,CAACM,iBAAiB,CAAC,CAC7C,GAAI,CAACqB,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAN,KAAK,CAAC,sDAAsD,CAAC,CACzE,CACA,MAAO,CAAAM,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}