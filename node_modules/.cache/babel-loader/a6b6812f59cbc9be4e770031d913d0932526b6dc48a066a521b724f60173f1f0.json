{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\OneDrive\\\\Desktop\\\\shadow-sidekick-sqlite-vss-poc\\\\haven-mental-health\\\\src\\\\messaging\\\\message-context.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContext = /*#__PURE__*/createContext();\n\n/**\n * Message Context\n * Manages unread messages and notifications\n * Simple state management for messaging features\n */\nexport function MessageProvider({\n  children\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  useEffect(() => {\n    // Load messages from storage\n    loadMessages();\n  }, []);\n  const loadMessages = () => {\n    // In real app, this would load from secure backend\n    const storedMessages = [{\n      id: 1,\n      patientId: 'patient-1',\n      patientName: 'Jane Doe',\n      preview: 'I wanted to discuss our last session...',\n      timestamp: new Date(Date.now() - 3600000),\n      read: false\n    }, {\n      id: 2,\n      patientId: 'patient-2',\n      patientName: 'John Smith',\n      preview: 'Thank you for the resources you shared',\n      timestamp: new Date(Date.now() - 7200000),\n      read: false\n    }];\n    setMessages(storedMessages);\n    setUnreadCount(storedMessages.filter(m => !m.read).length);\n  };\n  const markAsRead = messageId => {\n    setMessages(messages.map(m => m.id === messageId ? {\n      ...m,\n      read: true\n    } : m));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n  const recentMessages = messages.filter(m => !m.read).sort((a, b) => b.timestamp - a.timestamp);\n  const value = {\n    messages,\n    unreadCount,\n    recentMessages,\n    markAsRead\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(MessageProvider, \"up1XBqD/2pOdf+H9soXl8/i1wtg=\");\n_c = MessageProvider;\nexport function useMessages() {\n  _s2();\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessages must be used within MessageProvider');\n  }\n  return context;\n}\n_s2(useMessages, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MessageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","MessageContext","MessageProvider","children","_s","messages","setMessages","unreadCount","setUnreadCount","loadMessages","storedMessages","id","patientId","patientName","preview","timestamp","Date","now","read","filter","m","length","markAsRead","messageId","map","prev","Math","max","recentMessages","sort","a","b","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMessages","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/messaging/message-context.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst MessageContext = createContext();\n\n/**\n * Message Context\n * Manages unread messages and notifications\n * Simple state management for messaging features\n */\nexport function MessageProvider({ children }) {\n  const [messages, setMessages] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  \n  useEffect(() => {\n    // Load messages from storage\n    loadMessages();\n  }, []);\n\n  const loadMessages = () => {\n    // In real app, this would load from secure backend\n    const storedMessages = [\n      {\n        id: 1,\n        patientId: 'patient-1',\n        patientName: 'Jane Doe',\n        preview: 'I wanted to discuss our last session...',\n        timestamp: new Date(Date.now() - 3600000),\n        read: false\n      },\n      {\n        id: 2,\n        patientId: 'patient-2',\n        patientName: 'John Smith',\n        preview: 'Thank you for the resources you shared',\n        timestamp: new Date(Date.now() - 7200000),\n        read: false\n      }\n    ];\n    \n    setMessages(storedMessages);\n    setUnreadCount(storedMessages.filter(m => !m.read).length);\n  };\n\n  const markAsRead = (messageId) => {\n    setMessages(messages.map(m => \n      m.id === messageId ? { ...m, read: true } : m\n    ));\n    setUnreadCount(prev => Math.max(0, prev - 1));\n  };\n\n  const recentMessages = messages\n    .filter(m => !m.read)\n    .sort((a, b) => b.timestamp - a.timestamp);\n\n  const value = {\n    messages,\n    unreadCount,\n    recentMessages,\n    markAsRead\n  };\n\n  return (\n    <MessageContext.Provider value={value}>\n      {children}\n    </MessageContext.Provider>\n  );\n}\n\nexport function useMessages() {\n  const context = useContext(MessageContext);\n  if (!context) {\n    throw new Error('useMessages must be used within MessageProvider');\n  }\n  return context;\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,cAAc,gBAAGN,aAAa,CAAC,CAAC;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,eAAeA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC5C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd;IACAW,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,cAAc,GAAG,CACrB;MACEC,EAAE,EAAE,CAAC;MACLC,SAAS,EAAE,WAAW;MACtBC,WAAW,EAAE,UAAU;MACvBC,OAAO,EAAE,yCAAyC;MAClDC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;MACzCC,IAAI,EAAE;IACR,CAAC,EACD;MACEP,EAAE,EAAE,CAAC;MACLC,SAAS,EAAE,WAAW;MACtBC,WAAW,EAAE,YAAY;MACzBC,OAAO,EAAE,wCAAwC;MACjDC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;MACzCC,IAAI,EAAE;IACR,CAAC,CACF;IAEDZ,WAAW,CAACI,cAAc,CAAC;IAC3BF,cAAc,CAACE,cAAc,CAACS,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACF,IAAI,CAAC,CAACG,MAAM,CAAC;EAC5D,CAAC;EAED,MAAMC,UAAU,GAAIC,SAAS,IAAK;IAChCjB,WAAW,CAACD,QAAQ,CAACmB,GAAG,CAACJ,CAAC,IACxBA,CAAC,CAACT,EAAE,KAAKY,SAAS,GAAG;MAAE,GAAGH,CAAC;MAAEF,IAAI,EAAE;IAAK,CAAC,GAAGE,CAC9C,CAAC,CAAC;IACFZ,cAAc,CAACiB,IAAI,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,IAAI,GAAG,CAAC,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMG,cAAc,GAAGvB,QAAQ,CAC5Bc,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACF,IAAI,CAAC,CACpBW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAChB,SAAS,GAAGe,CAAC,CAACf,SAAS,CAAC;EAE5C,MAAMiB,KAAK,GAAG;IACZ3B,QAAQ;IACRE,WAAW;IACXqB,cAAc;IACdN;EACF,CAAC;EAED,oBACEtB,OAAA,CAACC,cAAc,CAACgC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7B,QAAA,EACnCA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAE9B;AAACjC,EAAA,CAzDeF,eAAe;AAAAoC,EAAA,GAAfpC,eAAe;AA2D/B,OAAO,SAASqC,WAAWA,CAAA,EAAG;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAG7C,UAAU,CAACK,cAAc,CAAC;EAC1C,IAAI,CAACwC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACpE;EACA,OAAOD,OAAO;AAChB;AAACD,GAAA,CANeD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}