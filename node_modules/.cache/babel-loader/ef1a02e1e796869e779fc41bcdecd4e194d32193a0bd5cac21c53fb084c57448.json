{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brian\\\\OneDrive\\\\Desktop\\\\shadow-sidekick-sqlite-vss-poc\\\\haven-mental-health\\\\src\\\\p2p\\\\p2p-provider.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { P2PService } from './p2p-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst P2PContext = /*#__PURE__*/createContext();\n\n/**\n * P2P Provider\n * Manages peer-to-peer connections for secure messaging and video\n * Uses WebRTC for direct therapist-patient communication\n */\nexport function P2PProvider({\n  children\n}) {\n  _s();\n  const [p2pService, setP2PService] = useState(null);\n  const [connections, setConnections] = useState(new Map());\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    initializeP2P();\n  }, []);\n  const initializeP2P = async () => {\n    try {\n      const service = new P2PService();\n      await service.initialize();\n      setP2PService(service);\n      setIsReady(true);\n    } catch (error) {\n      console.error('Failed to initialize P2P:', error);\n    }\n  };\n  const connectToPeer = async peerId => {\n    if (!p2pService) {\n      throw new Error('P2P service not initialized');\n    }\n\n    // Check if already connected\n    if (connections.has(peerId)) {\n      return connections.get(peerId);\n    }\n\n    // Create new connection\n    const connection = await p2pService.connectToPeer(peerId);\n    setConnections(new Map(connections.set(peerId, connection)));\n    return connection;\n  };\n  const sendMessage = async (peerId, message) => {\n    const connection = await connectToPeer(peerId);\n    return connection.send(message);\n  };\n  const onMessage = (peerId, callback) => {\n    const connection = connections.get(peerId);\n    if (!connection) {\n      console.warn('No connection found for peer:', peerId);\n      return () => {};\n    }\n    return connection.onMessage(callback);\n  };\n  const startCall = async (peerId, localStream) => {\n    const connection = await connectToPeer(peerId);\n    return connection.startCall(localStream);\n  };\n  const endCall = peerId => {\n    const connection = connections.get(peerId);\n    if (connection) {\n      connection.endCall();\n    }\n  };\n  const value = {\n    isReady,\n    connectToPeer,\n    sendMessage,\n    onMessage,\n    startCall,\n    endCall,\n    connections\n  };\n  return /*#__PURE__*/_jsxDEV(P2PContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(P2PProvider, \"P9fEZ25by0pFQupfomhfyLAEhPQ=\");\n_c = P2PProvider;\nexport function useP2P(peerId) {\n  _s2();\n  const context = useContext(P2PContext);\n  if (!context) {\n    throw new Error('useP2P must be used within P2PProvider');\n  }\n  const {\n    connections,\n    sendMessage,\n    onMessage,\n    startCall,\n    endCall,\n    connectToPeer\n  } = context;\n  const connection = connections.get(peerId);\n  return {\n    isConnected: (connection === null || connection === void 0 ? void 0 : connection.isConnected) || false,\n    connectionState: (connection === null || connection === void 0 ? void 0 : connection.state) || 'disconnected',\n    sendMessage: message => sendMessage(peerId, message),\n    onMessage: callback => onMessage(peerId, callback),\n    startCall: stream => startCall(peerId, stream),\n    endCall: () => endCall(peerId),\n    connect: () => connectToPeer(peerId),\n    onRemoteStream: callback => {\n      if (connection) {\n        return connection.onRemoteStream(callback);\n      }\n      return () => {};\n    },\n    toggleVideo: () => connection === null || connection === void 0 ? void 0 : connection.toggleVideo(),\n    toggleAudio: () => connection === null || connection === void 0 ? void 0 : connection.toggleAudio()\n  };\n}\n_s2(useP2P, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"P2PProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","P2PService","jsxDEV","_jsxDEV","P2PContext","P2PProvider","children","_s","p2pService","setP2PService","connections","setConnections","Map","isReady","setIsReady","initializeP2P","service","initialize","error","console","connectToPeer","peerId","Error","has","get","connection","set","sendMessage","message","send","onMessage","callback","warn","startCall","localStream","endCall","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useP2P","_s2","context","isConnected","connectionState","state","stream","connect","onRemoteStream","toggleVideo","toggleAudio","$RefreshReg$"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/p2p/p2p-provider.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { P2PService } from './p2p-service';\n\nconst P2PContext = createContext();\n\n/**\n * P2P Provider\n * Manages peer-to-peer connections for secure messaging and video\n * Uses WebRTC for direct therapist-patient communication\n */\nexport function P2PProvider({ children }) {\n  const [p2pService, setP2PService] = useState(null);\n  const [connections, setConnections] = useState(new Map());\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    initializeP2P();\n  }, []);\n\n  const initializeP2P = async () => {\n    try {\n      const service = new P2PService();\n      await service.initialize();\n      setP2PService(service);\n      setIsReady(true);\n    } catch (error) {\n      console.error('Failed to initialize P2P:', error);\n    }\n  };\n\n  const connectToPeer = async (peerId) => {\n    if (!p2pService) {\n      throw new Error('P2P service not initialized');\n    }\n\n    // Check if already connected\n    if (connections.has(peerId)) {\n      return connections.get(peerId);\n    }\n\n    // Create new connection\n    const connection = await p2pService.connectToPeer(peerId);\n    setConnections(new Map(connections.set(peerId, connection)));\n    \n    return connection;\n  };\n\n  const sendMessage = async (peerId, message) => {\n    const connection = await connectToPeer(peerId);\n    return connection.send(message);\n  };\n\n  const onMessage = (peerId, callback) => {\n    const connection = connections.get(peerId);\n    if (!connection) {\n      console.warn('No connection found for peer:', peerId);\n      return () => {};\n    }\n\n    return connection.onMessage(callback);\n  };\n\n  const startCall = async (peerId, localStream) => {\n    const connection = await connectToPeer(peerId);\n    return connection.startCall(localStream);\n  };\n\n  const endCall = (peerId) => {\n    const connection = connections.get(peerId);\n    if (connection) {\n      connection.endCall();\n    }\n  };\n\n  const value = {\n    isReady,\n    connectToPeer,\n    sendMessage,\n    onMessage,\n    startCall,\n    endCall,\n    connections\n  };\n\n  return (\n    <P2PContext.Provider value={value}>\n      {children}\n    </P2PContext.Provider>\n  );\n}\n\nexport function useP2P(peerId) {\n  const context = useContext(P2PContext);\n  if (!context) {\n    throw new Error('useP2P must be used within P2PProvider');\n  }\n\n  const { connections, sendMessage, onMessage, startCall, endCall, connectToPeer } = context;\n  const connection = connections.get(peerId);\n\n  return {\n    isConnected: connection?.isConnected || false,\n    connectionState: connection?.state || 'disconnected',\n    sendMessage: (message) => sendMessage(peerId, message),\n    onMessage: (callback) => onMessage(peerId, callback),\n    startCall: (stream) => startCall(peerId, stream),\n    endCall: () => endCall(peerId),\n    connect: () => connectToPeer(peerId),\n    onRemoteStream: (callback) => {\n      if (connection) {\n        return connection.onRemoteStream(callback);\n      }\n      return () => {};\n    },\n    toggleVideo: () => connection?.toggleVideo(),\n    toggleAudio: () => connection?.toggleAudio()\n  };\n}"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,UAAU,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,UAAU,gBAAGP,aAAa,CAAC,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,WAAWA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAIa,GAAG,CAAC,CAAC,CAAC;EACzD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACde,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,OAAO,GAAG,IAAIf,UAAU,CAAC,CAAC;MAChC,MAAMe,OAAO,CAACC,UAAU,CAAC,CAAC;MAC1BR,aAAa,CAACO,OAAO,CAAC;MACtBF,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,MAAME,aAAa,GAAG,MAAOC,MAAM,IAAK;IACtC,IAAI,CAACb,UAAU,EAAE;MACf,MAAM,IAAIc,KAAK,CAAC,6BAA6B,CAAC;IAChD;;IAEA;IACA,IAAIZ,WAAW,CAACa,GAAG,CAACF,MAAM,CAAC,EAAE;MAC3B,OAAOX,WAAW,CAACc,GAAG,CAACH,MAAM,CAAC;IAChC;;IAEA;IACA,MAAMI,UAAU,GAAG,MAAMjB,UAAU,CAACY,aAAa,CAACC,MAAM,CAAC;IACzDV,cAAc,CAAC,IAAIC,GAAG,CAACF,WAAW,CAACgB,GAAG,CAACL,MAAM,EAAEI,UAAU,CAAC,CAAC,CAAC;IAE5D,OAAOA,UAAU;EACnB,CAAC;EAED,MAAME,WAAW,GAAG,MAAAA,CAAON,MAAM,EAAEO,OAAO,KAAK;IAC7C,MAAMH,UAAU,GAAG,MAAML,aAAa,CAACC,MAAM,CAAC;IAC9C,OAAOI,UAAU,CAACI,IAAI,CAACD,OAAO,CAAC;EACjC,CAAC;EAED,MAAME,SAAS,GAAGA,CAACT,MAAM,EAAEU,QAAQ,KAAK;IACtC,MAAMN,UAAU,GAAGf,WAAW,CAACc,GAAG,CAACH,MAAM,CAAC;IAC1C,IAAI,CAACI,UAAU,EAAE;MACfN,OAAO,CAACa,IAAI,CAAC,+BAA+B,EAAEX,MAAM,CAAC;MACrD,OAAO,MAAM,CAAC,CAAC;IACjB;IAEA,OAAOI,UAAU,CAACK,SAAS,CAACC,QAAQ,CAAC;EACvC,CAAC;EAED,MAAME,SAAS,GAAG,MAAAA,CAAOZ,MAAM,EAAEa,WAAW,KAAK;IAC/C,MAAMT,UAAU,GAAG,MAAML,aAAa,CAACC,MAAM,CAAC;IAC9C,OAAOI,UAAU,CAACQ,SAAS,CAACC,WAAW,CAAC;EAC1C,CAAC;EAED,MAAMC,OAAO,GAAId,MAAM,IAAK;IAC1B,MAAMI,UAAU,GAAGf,WAAW,CAACc,GAAG,CAACH,MAAM,CAAC;IAC1C,IAAII,UAAU,EAAE;MACdA,UAAU,CAACU,OAAO,CAAC,CAAC;IACtB;EACF,CAAC;EAED,MAAMC,KAAK,GAAG;IACZvB,OAAO;IACPO,aAAa;IACbO,WAAW;IACXG,SAAS;IACTG,SAAS;IACTE,OAAO;IACPzB;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,UAAU,CAACiC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA9B,QAAA,EAC/BA;EAAQ;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B;AAAClC,EAAA,CA/EeF,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AAiF3B,OAAO,SAASsC,MAAMA,CAACtB,MAAM,EAAE;EAAAuB,GAAA;EAC7B,MAAMC,OAAO,GAAG/C,UAAU,CAACM,UAAU,CAAC;EACtC,IAAI,CAACyC,OAAO,EAAE;IACZ,MAAM,IAAIvB,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EAEA,MAAM;IAAEZ,WAAW;IAAEiB,WAAW;IAAEG,SAAS;IAAEG,SAAS;IAAEE,OAAO;IAAEf;EAAc,CAAC,GAAGyB,OAAO;EAC1F,MAAMpB,UAAU,GAAGf,WAAW,CAACc,GAAG,CAACH,MAAM,CAAC;EAE1C,OAAO;IACLyB,WAAW,EAAE,CAAArB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEqB,WAAW,KAAI,KAAK;IAC7CC,eAAe,EAAE,CAAAtB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEuB,KAAK,KAAI,cAAc;IACpDrB,WAAW,EAAGC,OAAO,IAAKD,WAAW,CAACN,MAAM,EAAEO,OAAO,CAAC;IACtDE,SAAS,EAAGC,QAAQ,IAAKD,SAAS,CAACT,MAAM,EAAEU,QAAQ,CAAC;IACpDE,SAAS,EAAGgB,MAAM,IAAKhB,SAAS,CAACZ,MAAM,EAAE4B,MAAM,CAAC;IAChDd,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAACd,MAAM,CAAC;IAC9B6B,OAAO,EAAEA,CAAA,KAAM9B,aAAa,CAACC,MAAM,CAAC;IACpC8B,cAAc,EAAGpB,QAAQ,IAAK;MAC5B,IAAIN,UAAU,EAAE;QACd,OAAOA,UAAU,CAAC0B,cAAc,CAACpB,QAAQ,CAAC;MAC5C;MACA,OAAO,MAAM,CAAC,CAAC;IACjB,CAAC;IACDqB,WAAW,EAAEA,CAAA,KAAM3B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE2B,WAAW,CAAC,CAAC;IAC5CC,WAAW,EAAEA,CAAA,KAAM5B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAE4B,WAAW,CAAC;EAC7C,CAAC;AACH;AAACT,GAAA,CA1BeD,MAAM;AAAA,IAAAD,EAAA;AAAAY,YAAA,CAAAZ,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}