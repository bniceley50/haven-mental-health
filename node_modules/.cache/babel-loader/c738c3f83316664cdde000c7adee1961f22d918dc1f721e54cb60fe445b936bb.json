{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useNavigate } from 'react-router-dom';\nimport { useCallback } from 'react';\n\n/**\n * Custom navigation hook with error handling and loading states\n * Provides a clean interface for navigation throughout the app\n */\nexport function useNavigation() {\n  _s();\n  const navigate = useNavigate();\n\n  // Navigate to session note creation with patient context\n  const navigateToSessionNote = useCallback((patientData = null) => {\n    try {\n      if (patientData) {\n        // Pass patient data through navigation state\n        navigate('/note/new', {\n          state: {\n            patientId: patientData.id,\n            patientName: patientData.patient || patientData.name,\n            appointmentTime: patientData.time,\n            appointmentType: patientData.type || 'session'\n          }\n        });\n      } else {\n        // New note without patient context\n        navigate('/note/new');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n      // In production, this would report to error tracking\n    }\n  }, [navigate]);\n\n  // Navigate to secure messaging\n  const navigateToMessage = useCallback((patientId = null) => {\n    try {\n      if (patientId) {\n        navigate(`/chat/${patientId}`);\n      } else {\n        // Go to message list if no specific patient\n        navigate('/messages');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to video session\n  const navigateToVideo = useCallback(sessionData => {\n    try {\n      if (!sessionData) {\n        console.error('Session data required for video call');\n        return;\n      }\n\n      // Generate session ID from appointment data\n      const sessionId = `session-${sessionData.id}-${Date.now()}`;\n      navigate(`/video/${sessionId}`, {\n        state: {\n          patientName: sessionData.patient,\n          appointmentTime: sessionData.time\n        }\n      });\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to schedule\n  const navigateToSchedule = useCallback(() => {\n    try {\n      navigate('/schedule');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to all messages\n  const navigateToAllMessages = useCallback(() => {\n    try {\n      navigate('/messages');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n  return {\n    navigateToSessionNote,\n    navigateToMessage,\n    navigateToVideo,\n    navigateToSchedule,\n    navigateToAllMessages\n  };\n}\n_s(useNavigation, \"5Dm43IB4apH2a0WVEGr7bDDbMkI=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useNavigate","useCallback","useNavigation","_s","navigate","navigateToSessionNote","patientData","state","patientId","id","patientName","patient","name","appointmentTime","time","appointmentType","type","error","console","navigateToMessage","navigateToVideo","sessionData","sessionId","Date","now","navigateToSchedule","navigateToAllMessages"],"sources":["C:/Users/brian/OneDrive/Desktop/shadow-sidekick-sqlite-vss-poc/haven-mental-health/src/hooks/useNavigation.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\nimport { useCallback } from 'react';\n\n/**\n * Custom navigation hook with error handling and loading states\n * Provides a clean interface for navigation throughout the app\n */\nexport function useNavigation() {\n  const navigate = useNavigate();\n\n  // Navigate to session note creation with patient context\n  const navigateToSessionNote = useCallback((patientData = null) => {\n    try {\n      if (patientData) {\n        // Pass patient data through navigation state\n        navigate('/note/new', { \n          state: { \n            patientId: patientData.id,\n            patientName: patientData.patient || patientData.name,\n            appointmentTime: patientData.time,\n            appointmentType: patientData.type || 'session'\n          } \n        });\n      } else {\n        // New note without patient context\n        navigate('/note/new');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n      // In production, this would report to error tracking\n    }\n  }, [navigate]);\n\n  // Navigate to secure messaging\n  const navigateToMessage = useCallback((patientId = null) => {\n    try {\n      if (patientId) {\n        navigate(`/chat/${patientId}`);\n      } else {\n        // Go to message list if no specific patient\n        navigate('/messages');\n      }\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to video session\n  const navigateToVideo = useCallback((sessionData) => {\n    try {\n      if (!sessionData) {\n        console.error('Session data required for video call');\n        return;\n      }\n      \n      // Generate session ID from appointment data\n      const sessionId = `session-${sessionData.id}-${Date.now()}`;\n      \n      navigate(`/video/${sessionId}`, {\n        state: {\n          patientName: sessionData.patient,\n          appointmentTime: sessionData.time\n        }\n      });\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to schedule\n  const navigateToSchedule = useCallback(() => {\n    try {\n      navigate('/schedule');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  // Navigate to all messages\n  const navigateToAllMessages = useCallback(() => {\n    try {\n      navigate('/messages');\n    } catch (error) {\n      console.error('Navigation error:', error);\n    }\n  }, [navigate]);\n\n  return {\n    navigateToSessionNote,\n    navigateToMessage,\n    navigateToVideo,\n    navigateToSchedule,\n    navigateToAllMessages\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}